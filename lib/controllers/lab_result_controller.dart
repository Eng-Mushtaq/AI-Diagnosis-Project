import 'package:get/get.dart';
import '../models/lab_result_model.dart';
import '../services/mock_data_service.dart';

// Lab result controller for managing lab results
class LabResultController extends GetxController {
  final MockDataService _dataService = MockDataService();
  
  // Observable lab results list
  final RxList<LabResultModel> _labResults = <LabResultModel>[].obs;
  List<LabResultModel> get labResults => _labResults;
  
  // Selected lab result
  final Rx<LabResultModel?> _selectedLabResult = Rx<LabResultModel?>(null);
  LabResultModel? get selectedLabResult => _selectedLabResult.value;
  
  // Loading state
  final RxBool _isLoading = false.obs;
  bool get isLoading => _isLoading.value;
  
  // Error message
  final RxString _errorMessage = ''.obs;
  String get errorMessage => _errorMessage.value;
  
  // Get user lab results
  Future<void> getUserLabResults(String userId) async {
    _isLoading.value = true;
    _errorMessage.value = '';
    
    try {
      final results = await _dataService.getUserLabResults(userId);
      _labResults.assignAll(results);
    } catch (e) {
      _errorMessage.value = 'Failed to get lab results: ${e.toString()}';
    } finally {
      _isLoading.value = false;
    }
  }
  
  // Upload lab result
  Future<bool> uploadLabResult({
    required String userId,
    required String testName,
    required DateTime testDate,
    required String labName,
    required String resultUrl,
    String? doctorId,
    Map<String, dynamic>? resultValues,
    String? notes,
  }) async {
    _isLoading.value = true;
    _errorMessage.value = '';
    
    try {
      final labResult = LabResultModel(
        id: '', // Will be generated by the service
        userId: userId,
        testName: testName,
        testDate: testDate,
        labName: labName,
        resultUrl: resultUrl,
        doctorId: doctorId,
        status: 'pending',
        resultValues: resultValues,
        notes: notes,
        uploadedAt: DateTime.now(),
      );
      
      final newLabResult = await _dataService.uploadLabResult(labResult);
      _labResults.add(newLabResult);
      return true;
    } catch (e) {
      _errorMessage.value = 'Failed to upload lab result: ${e.toString()}';
      return false;
    } finally {
      _isLoading.value = false;
    }
  }
  
  // Set selected lab result
  void setSelectedLabResult(LabResultModel labResult) {
    _selectedLabResult.value = labResult;
  }
  
  // Clear selected lab result
  void clearSelectedLabResult() {
    _selectedLabResult.value = null;
  }
  
  // Get lab result by ID
  LabResultModel? getLabResultById(String id) {
    try {
      return _labResults.firstWhere((result) => result.id == id);
    } catch (e) {
      return null;
    }
  }
  
  // Get recent lab results
  List<LabResultModel> getRecentLabResults() {
    final sortedResults = List<LabResultModel>.from(_labResults)
      ..sort((a, b) => b.uploadedAt.compareTo(a.uploadedAt));
    
    return sortedResults.take(5).toList();
  }
  
  // Get lab results by test name
  List<LabResultModel> getLabResultsByTestName(String testName) {
    return _labResults
        .where((result) => result.testName.toLowerCase().contains(testName.toLowerCase()))
        .toList();
  }
  
  // Get lab results by status
  List<LabResultModel> getLabResultsByStatus(String status) {
    return _labResults
        .where((result) => result.status == status)
        .toList();
  }
  
  // Get common test names for dropdown
  List<String> getCommonTestNames() {
    return [
      'Complete Blood Count (CBC)',
      'Lipid Profile',
      'Liver Function Test',
      'Kidney Function Test',
      'Thyroid Function Test',
      'Blood Glucose',
      'HbA1c',
      'Vitamin D',
      'Vitamin B12',
      'Iron Profile',
      'Urine Analysis',
      'Stool Analysis',
      'COVID-19 Test',
      'X-Ray',
      'CT Scan',
      'MRI',
      'Ultrasound',
      'ECG',
      'Echocardiogram',
    ];
  }
  
  // Get common lab names for dropdown
  List<String> getCommonLabNames() {
    return [
      'Al-Borg Medical Laboratories',
      'Saudi German Hospital Lab',
      'King Faisal Specialist Hospital Lab',
      'Dr. Sulaiman Al Habib Medical Group Lab',
      'Dallah Hospital Lab',
      'King Fahad Medical City Lab',
      'Al-Mowasat Hospital Lab',
      'Almana General Hospital Lab',
      'Specialized Medical Center Lab',
    ];
  }
}
